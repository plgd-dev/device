# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Publish Docker Image

on:
  workflow_call:
    inputs:
      name:
        description: Name of the container
        type: string
        required: true
      file:
        description: Dockerfile to build
        type: string
        required: true
      template-file:
        description: Template dockefile to resolve
        type: string
        required: false


env:
  REGISTRY: ghcr.io

jobs:
  build-and-publish-with-cfg:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: CPU Info
        run: |
          cat /proc/cpuinfo
          echo "Number of cores: $(nproc)"
          echo "Number of threads: $(nproc --all)"
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ inputs.name }}
          tags: |
            type=raw,enable={{is_default_branch}},value=vnext
            type=sha,enable={{is_default_branch}},prefix=vnext-,format=short
            type=ref,event=pr,prefix=vnext-pr,suffix=-{{sha}}
            type=ref,event=pr,prefix=vnext-pr
            type=ref,enable={{is_default_branch}},event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Set build args
        id: build-args
        run: |
          echo "commit_date=$(date -u +%FT%TZ --date=@$(git show --format=%ct HEAD --quiet))" >> $GITHUB_OUTPUT
          short_commit=$(git show --format=%h HEAD --quiet)
          echo "short_commit=${short_commit}" >> $GITHUB_OUTPUT
          echo "date=$(date -u +%FT%TZ)" >> $GITHUB_OUTPUT
          version=$(git describe --tags --abbrev=0 | sed 's/^v//')
          release_url="${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          if [[ "${{ github.ref }}" != "refs/tags/"* ]]; then
            version="${version}-pr${{ github.event.number }}"
          elif curl --fail-with-body -s "$release_url" > /dev/null; then 
            echo "release_url=$release_url" >> $GITHUB_OUTPUT
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: First try to build and push docker image
        uses: docker/build-push-action@v6
        # This needs to be true to proceed to the next step of failure
        continue-on-error: true
        # You need to specify an id to be able to tell what the status of this action was
        id: BuildAndPush1
        with:
          context: ./
          platforms: linux/amd64,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            NAME=${{ inputs.name }}
            COMMIT_DATE=${{ steps.build-args.outputs.commit_date }}
            SHORT_COMMIT=${{ steps.build-args.outputs.short_commit }}
            DATE=${{ steps.build-args.outputs.date }}
            VERSION=${{ steps.build-args.outputs.version }}
            RELEASE_URL=${{ steps.build-args.outputs.release_url }}
          file: ${{ inputs.file }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Second try to build and push docker image when first build fails
        # Only run this step if step 1 fails. It knows that step one failed because we specified an `id` for the first step
        if: steps.BuildAndPush1.outcome == 'failure'
        uses: docker/build-push-action@v6
        with:
          context: ./
          platforms: linux/amd64,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            NAME=${{ inputs.name }}
            COMMIT_DATE=${{ steps.build-args.outputs.commit_date }}
            SHORT_COMMIT=${{ steps.build-args.outputs.short_commit }}
            DATE=${{ steps.build-args.outputs.date }}
            VERSION=${{ steps.build-args.outputs.version }}
            RELEASE_URL=${{ steps.build-args.outputs.release_url }}
          file: ${{ inputs.file }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}